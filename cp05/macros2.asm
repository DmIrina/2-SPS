; виведення строки на екран
; Адрес первого символа строки должен быть  записан в DX. 
; Строка должна  заканчиваться символом $ (24h), который не будет выведен в STDOUT.
;-----------------------------------------------------------------------------------
print MACRO msg					;вивід строки [dx] на екран (без cr)
	push ax
	mov ah,9h
	lea dx,msg
    int 21h
	pop ax		
ENDM print

;-----------------------------------------------------------------------------------
print_cr MACRO			       ; \n
	push	ax
	push	dx
	mov     ah,9h
	lea     dx,msg_cr
    int     21h
	pop 	dx	
	pop 	ax		
ENDM print_cr
;-----------------------------------------------------------------------------------
introduction MACRO msg_1, msg_02, msg_03 ; introduction - Вывод условия и приглашения
	print msg_01
	print msg_02
	print msg_03
ENDM introduction
;-----------------------------------------------------------------------------------

; введення числа - строки
input_str MACRO buf
mov ah, 0ah
lea dx, buf
int 21h
ENDM input_str
;-----------------------------------------------------------------------------------

; string_to_int - строка цифр у число 

; на вхід: string - строка (буфер): 
; 0-й байт - розмір буферу, 1-й - кількість введених символів
; 2-й - .... - символи для перетворення 						
; на вихід: число з ах

string_to_int MACRO buf
					
        xor ax, ax                   
        lea di, buf+2    ; di - індексний регістр - вказує на строку з цифрами
		lea bx, buf+1	; адреса другого елемента буферу
		mov cx, [bx]    	; кількість введених символів - довжина строки
		xor ch, ch           		
        mov si, 10                  
        xor bh, bh                  
					        
@@start_loop:
        mul si              ; множення вмісту ax на вміст si(10)
        mov bl,[di]         ; bl <- наступний символ
        cmp bl, 30h         ; порівняння з 0
        jl common_err       ; якщо менше
        cmp bl, 39h         ; порівняння з 9
        jg common_err       ; якщо більше
        sub bl,30h          ; -30h
        add ax,bx           ; + до суми в ax
        inc di              ; інкремент di
        loop @@start_loop   ; повтор циклу
	cmp ax, 7281            ; порівняння введеного числа з максимально можливим: для уникнення переповнення
        jg over_err         ; якщо більше
	
ENDM string_to_int
;-----------------------------------------------------------------------------------

; out_int виведення БЕЗзнакового 16-розрядного числа на екран
; num - число для відображення 
out_int MACRO num
        mov ax, num
        mov bx, 10      
        xor cx, cx      	; кількість символів у модулі числа
        @@divide:           ; ділення на 10
                xor dx, dx
                div bx		; ax = ax/10
                push dx     ; остача -> стек
                inc cx      ; кількість цифр у числі
                or ax, ax
        jnz     @@divide    ; повторення, поки у числі є цифри (ax != 0)
        mov     ah, 02h		; вивід символа (int 21h у циклі)
        @@store:
                pop dx      ; дістати цифри (остачу від ділення на 10) зі стеку
                add dl, 30h ; цифри -> символи (30h)
                int 21h     ; виведення на екран
        loop    @@store
	
ENDM out_int